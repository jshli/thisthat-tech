/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    '/v1/public/creators/{creatorId}/series': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetches lists of series filtered by a creator id.
         * @description Fetches lists of comic series in which a specific creator's work appears, with optional filters. See notes on individual parameters below.
         */
        get: operations['getCreatorSeriesCollection'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/public/events/{eventId}/stories': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetches lists of stories filtered by an event id.
         * @description Fetches lists of comic stories from a specific event, with optional filters. See notes on individual parameters below.
         */
        get: operations['getEventStoryCollection'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/public/creators': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetches lists of creators.
         * @description Fetches lists of comic creators with optional filters. See notes on individual parameters below.
         */
        get: operations['getCreatorCollection'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/public/creators/{creatorId}/comics': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetches lists of comics filtered by a creator id.
         * @description Fetches lists of comics in which the work of a specific creator appears, with optional filters. See notes on individual parameters below.
         */
        get: operations['getComicsCollection'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/public/stories/{storyId}/characters': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetches lists of characters filtered by a story id.
         * @description Fetches lists of comic characters appearing in a single story, with optional filters. See notes on individual parameters below.
         */
        get: operations['getCreatorCollectionByStory'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/public/comics/{comicId}/stories': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetches lists of stories filtered by a comic id.
         * @description Fetches lists of comic stories in a specific comic issue, with optional filters. See notes on individual parameters below.
         */
        get: operations['getComicStoryCollection'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/public/events/{eventId}/comics': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetches lists of comics filtered by an event id.
         * @description Fetches lists of comics which take place during a specific event, with optional filters. See notes on individual parameters below.
         */
        get: operations['getComicsCollectionByEvent'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/public/series/{seriesId}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetches a single comic series by id.
         * @description This method fetches a single comic series resource.  It is the canonical URI for any comic series resource provided by the API.
         */
        get: operations['getSeriesIndividual'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/public/characters/{characterId}/series': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetches lists of series filtered by a character id.
         * @description Fetches lists of comic series in which a specific character appears, with optional filters. See notes on individual parameters below.
         */
        get: operations['getCharacterSeriesCollection'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/public/events/{eventId}/series': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetches lists of series filtered by an event id.
         * @description Fetches lists of comic series in which a specific event takes place, with optional filters. See notes on individual parameters below.
         */
        get: operations['getEventSeriesCollection'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/public/series/{seriesId}/comics': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetches lists of comics filtered by a series id.
         * @description Fetches lists of comics which are published as part of a specific series, with optional filters. See notes on individual parameters below.
         */
        get: operations['getComicsCollectionBySeries'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/public/characters/{characterId}/comics': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetches lists of comics filtered by a character id.
         * @description Fetches lists of comics containing a specific character, with optional filters. See notes on individual parameters below.
         */
        get: operations['getComicsCharacterCollection'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/public/stories/{storyId}/events': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetches lists of events filtered by a story id.
         * @description Fetches lists of events in which a specific story appears, with optional filters. See notes on individual parameters below.
         */
        get: operations['getEventsCollection'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/public/comics/{comicId}/characters': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetches lists of characters filtered by a comic id.
         * @description Fetches lists of characters which appear in a specific comic with optional filters. See notes on individual parameters below.
         */
        get: operations['getComicCharacterCollection'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/public/creators/{creatorId}/stories': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetches lists of stories filtered by a creator id.
         * @description Fetches lists of comic stories by a specific creator with optional filters. See notes on individual parameters below.
         */
        get: operations['getCreatorStoryCollection'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/public/comics/{comicId}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetches a single comic by id.
         * @description This method fetches a single comic resource.  It is the canonical URI for any comic resource provided by the API.
         */
        get: operations['getComicIndividual'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/public/stories/{storyId}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetches a single comic story by id.
         * @description This method fetches a single comic story resource.  It is the canonical URI for any comic story resource provided by the API.
         */
        get: operations['getStoryIndividual'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/public/characters/{characterId}/events': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetches lists of events filtered by a character id.
         * @description Fetches lists of events in which a specific character appears, with optional filters. See notes on individual parameters below.
         */
        get: operations['getCharacterEventsCollection'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/public/creators/{creatorId}/events': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetches lists of events filtered by a creator id.
         * @description Fetches lists of events featuring the work of a specific creator with optional filters. See notes on individual parameters below.
         */
        get: operations['getCreatorEventsCollection'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/public/series/{seriesId}/creators': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetches lists of creators filtered by a series id.
         * @description Fetches lists of comic creators whose work appears in a specific series, with optional filters. See notes on individual parameters below.
         */
        get: operations['getCreatorCollectionBySeries'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/public/comics/{comicId}/creators': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetches lists of creators filtered by a comic id.
         * @description Fetches lists of comic creators whose work appears in a specific comic, with optional filters. See notes on individual parameters below.
         */
        get: operations['getCreatorCollectionByComic'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/public/characters/{characterId}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetches a single character by id.
         * @description This method fetches a single character resource.  It is the canonical URI for any character resource provided by the API.
         */
        get: operations['getCharacterIndividual'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/public/comics': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetches lists of comics.
         * @description Fetches lists of comics with optional filters. See notes on individual parameters below.
         */
        get: operations['getComics'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/public/series': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetches lists of series.
         * @description Fetches lists of comic series with optional filters. See notes on individual parameters below.
         */
        get: operations['getSeriesCollection'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/public/series/{seriesId}/stories': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetches lists of stories filtered by a series id.
         * @description Fetches lists of comic stories from a specific series with optional filters. See notes on individual parameters below.
         */
        get: operations['getSeriesStoryCollection'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/public/events/{eventId}/characters': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetches lists of characters filtered by an event id.
         * @description Fetches lists of characters which appear in a specific event, with optional filters. See notes on individual parameters below.
         */
        get: operations['getEventCharacterCollection'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/public/characters': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetches lists of characters.
         * @description Fetches lists of comic characters with optional filters. See notes on individual parameters below.
         */
        get: operations['getCharacters'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/public/creators/{creatorId}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetches a single creator by id.
         * @description This method fetches a single creator resource.  It is the canonical URI for any creator resource provided by the API.
         */
        get: operations['getCreatorIndividual'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/public/events/{eventId}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetches a single event by id.
         * @description This method fetches a single event resource.  It is the canonical URI for any event resource provided by the API.
         */
        get: operations['getEventIndividual'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/public/stories/{storyId}/creators': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetches lists of creators filtered by a story id.
         * @description Fetches lists of comic creators whose work appears in a specific story, with optional filters. See notes on individual parameters below.
         */
        get: operations['getCreatorCollectionByStoryId'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/public/characters/{characterId}/stories': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetches lists of stories filtered by a character id.
         * @description Fetches lists of comic stories  featuring a specific character with optional filters. See notes on individual parameters below.
         */
        get: operations['getCharacterStoryCollection'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/public/stories/{storyId}/comics': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetches lists of comics filtered by a story id.
         * @description Fetches lists of comics in which a specific story appears, with optional filters. See notes on individual parameters below.
         */
        get: operations['getComicsCollectionByStoryId'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/public/stories/{storyId}/series': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetches lists of series filtered by a story id.
         * @description Fetches lists of comic series in which the specified story takes place. See notes on individual parameters below.
         */
        get: operations['getStorySeriesCollection'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/public/series/{seriesId}/events': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetches lists of events filtered by a series id.
         * @description Fetches lists of events which occur in a specific series, with optional filters. See notes on individual parameters below.
         */
        get: operations['getEventsCollectionBySeriesId'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/public/comics/{comicId}/events': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetches lists of events filtered by a comic id.
         * @description Fetches lists of events in which a specific comic appears, with optional filters. See notes on individual parameters below.
         */
        get: operations['getIssueEventsCollection'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/public/events': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetches lists of events.
         * @description Fetches lists of events with optional filters. See notes on individual parameters below.
         */
        get: operations['getEvents'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/public/series/{seriesId}/characters': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetches lists of characters filtered by a series id.
         * @description Fetches lists of characters which appear in specific series, with optional filters. See notes on individual parameters below.
         */
        get: operations['getSeriesCharacterWrapper'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/public/events/{eventId}/creators': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetches lists of creators filtered by an event id.
         * @description Fetches lists of comic creators whose work appears in a specific event, with optional filters. See notes on individual parameters below.
         */
        get: operations['getCreatorCollectionByEventId'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/v1/public/stories': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetches lists of stories.
         * @description Fetches lists of comic stories with optional filters. See notes on individual parameters below.
         */
        get: operations['getStoryCollection'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Array: unknown[];
        double: number;
        SeriesList: {
            available?: number;
            returned?: number;
            /** @description The path to the full list of series in this collection. */
            collectionURI?: string;
            items?: components['schemas']['SeriesList'];
        };
        int: number;
        CreatorList: {
            available?: number;
            returned?: number;
            /** @description The path to the full list of creators in this collection. */
            collectionURI?: string;
            items?: components['schemas']['CreatorList'];
        };
        ComicDataContainer: {
            offset?: number;
            limit?: number;
            total?: number;
            count?: number;
            results?: components['schemas']['ComicDataContainer'];
        };
        Creator: {
            id?: number;
            /** @description The first name of the creator. */
            firstName?: string;
            /** @description The middle name of the creator. */
            middleName?: string;
            /** @description The last name of the creator. */
            lastName?: string;
            /** @description The suffix or honorific for the creator. */
            suffix?: string;
            /** @description The full name of the creator (a space-separated concatenation of the above four fields). */
            fullName?: string;
            modified?: string;
            /** @description The canonical URL identifier for this resource. */
            resourceURI?: string;
            urls?: components['schemas']['Url'][];
            thumbnail?: components['schemas']['Image'];
            series?: components['schemas']['SeriesList'];
            stories?: components['schemas']['StoryList'];
            comics?: components['schemas']['ComicList'];
            events?: components['schemas']['EventList'];
        };
        Image: {
            /** @description The directory path of to the image. */
            path?: string;
            /** @description The file extension for the image. */
            extension?: string;
        };
        Url: {
            /** @description A text identifier for the URL. */
            type?: string;
            /** @description A full URL (including scheme, domain, and path). */
            url?: string;
        };
        CharacterDataContainer: {
            offset?: number;
            limit?: number;
            total?: number;
            count?: number;
            results?: components['schemas']['CharacterDataContainer'];
        };
        EventDataWrapper: {
            code?: components['schemas']['int'];
            /** @description A string description of the call status. */
            status?: string;
            /** @description The copyright notice for the returned result. */
            copyright?: string;
            /** @description The attribution notice for this result.  Please display either this notice or the contents of the attributionHTML field on all screens which contain data from the Marvel Comics API. */
            attributionText?: string;
            /** @description An HTML representation of the attribution notice for this result.  Please display either this notice or the contents of the attributionText field on all screens which contain data from the Marvel Comics API. */
            attributionHTML?: string;
            data?: components['schemas']['EventDataContainer'];
            /** @description A digest value of the content returned by the call. */
            etag?: string;
        };
        ComicDate: {
            /** @description A description of the date (e.g. onsale date, FOC date). */
            type?: string;
            date?: components['schemas']['Date'];
        };
        Date: string;
        SeriesDataContainer: {
            offset?: components['schemas']['int'];
            limit?: components['schemas']['int'];
            total?: components['schemas']['int'];
            count?: components['schemas']['int'];
            results?: components['schemas']['Array'];
        };
        Story: {
            id?: components['schemas']['int'];
            /** @description The story title. */
            title?: string;
            /** @description A short description of the story. */
            description?: string;
            /** @description The canonical URL identifier for this resource.  */
            resourceURI?: string;
            /** @description The story type e.g. interior story, cover, text story. */
            type?: string;
            modified?: components['schemas']['Date'];
            thumbnail?: components['schemas']['Image'];
            comics?: components['schemas']['ComicList'];
            series?: components['schemas']['SeriesList'];
            events?: components['schemas']['EventList'];
            characters?: components['schemas']['CharacterList'];
            creators?: components['schemas']['CreatorList'];
            originalissue?: components['schemas']['ComicSummary'];
        };
        StoryDataWrapper: {
            code?: components['schemas']['int'];
            /** @description A string description of the call status. */
            status?: string;
            /** @description The copyright notice for the returned result. */
            copyright?: string;
            /** @description The attribution notice for this result.  Please display either this notice or the contents of the attributionHTML field on all screens which contain data from the Marvel Comics API. */
            attributionText?: string;
            /** @description An HTML representation of the attribution notice for this result.  Please display either this notice or the contents of the attributionText field on all screens which contain data from the Marvel Comics API. */
            attributionHTML?: string;
            data?: components['schemas']['StoryDataContainer'];
            /** @description A digest value of the content returned by the call. */
            etag?: string;
        };
        Comic: {
            id?: components['schemas']['int'];
            digitalId?: components['schemas']['int'];
            /** @description The canonical title of the comic. */
            title?: string;
            issueNumber?: components['schemas']['double'];
            /** @description If the issue is a variant (e.g. an alternate cover, second printing, or director’s cut), a text description of the variant. */
            variantDescription?: string;
            /** @description The preferred description of the comic. */
            description?: string;
            modified?: components['schemas']['Date'];
            /** @description The ISBN for the comic (generally only populated for collection formats). */
            isbn?: string;
            /** @description The UPC barcode number for the comic (generally only populated for periodical formats). */
            upc?: string;
            /** @description The Diamond code for the comic. */
            diamondCode?: string;
            /** @description The EAN barcode for the comic. */
            ean?: string;
            /** @description The ISSN barcode for the comic. */
            issn?: string;
            /** @description The publication format of the comic e.g. comic, hardcover, trade paperback. */
            format?: string;
            pageCount?: components['schemas']['int'];
            textObjects?: components['schemas']['Array'];
            /** @description The canonical URL identifier for this resource. */
            resourceURI?: string;
            urls?: components['schemas']['Url'];
            series?: components['schemas']['SeriesSummary'];
            variants?: components['schemas']['Array'];
            collections?: components['schemas']['Array'];
            collectedIssues?: components['schemas']['Array'];
            dates?: components['schemas']['Array'];
            prices?: number;
            thumbnail?: components['schemas']['Image'];
            images?: components['schemas']['Image'][];
            creators?: components['schemas']['CreatorList'];
            characters?: components['schemas']['CharacterList'];
            stories?: components['schemas']['StoryList'];
            events?: components['schemas']['EventList'];
        };
        CreatorDataContainer: {
            offset?: components['schemas']['int'];
            limit?: components['schemas']['int'];
            total?: components['schemas']['int'];
            count?: components['schemas']['int'];
            results?: components['schemas']['Array'];
        };
        SeriesSummary: {
            /** @description The path to the individual series resource. */
            resourceURI?: string;
            /** @description The canonical name of the series. */
            name?: string;
        };
        CreatorSummary: {
            /** @description The path to the individual creator resource. */
            resourceURI?: string;
            /** @description The full name of the creator. */
            name?: string;
            /** @description The role of the creator in the parent entity. */
            role?: string;
        };
        CharacterSummary: {
            /** @description The path to the individual character resource. */
            resourceURI?: string;
            /** @description The full name of the character. */
            name?: string;
            /** @description The role of the creator in the parent entity. */
            role?: string;
        };
        CharacterDataWrapper: {
            code?: components['schemas']['int'];
            /** @description A string description of the call status. */
            status?: string;
            /** @description The copyright notice for the returned result. */
            copyright?: string;
            /** @description The attribution notice for this result.  Please display either this notice or the contents of the attributionHTML field on all screens which contain data from the Marvel Comics API. */
            attributionText?: string;
            /** @description An HTML representation of the attribution notice for this result.  Please display either this notice or the contents of the attributionText field on all screens which contain data from the Marvel Comics API. */
            attributionHTML?: string;
            data?: components['schemas']['CharacterDataContainer'];
            /** @description A digest value of the content returned by the call. */
            etag?: string;
        };
        Character: {
            id?: components['schemas']['int'];
            /** @description The name of the character. */
            name?: string;
            /** @description A short bio or description of the character. */
            description?: string;
            modified?: components['schemas']['Date'];
            /** @description The canonical URL identifier for this resource. */
            resourceURI?: string;
            urls?: components['schemas']['Array'];
            thumbnail?: components['schemas']['Image'];
            comics?: components['schemas']['ComicList'];
            stories?: components['schemas']['StoryList'];
            events?: components['schemas']['EventList'];
            series?: components['schemas']['SeriesList'];
        };
        ComicDataWrapper: {
            code?: components['schemas']['int'];
            /** @description A string description of the call status. */
            status?: string;
            /** @description The copyright notice for the returned result. */
            copyright?: string;
            /** @description The attribution notice for this result.  Please display either this notice or the contents of the attributionHTML field on all screens which contain data from the Marvel Comics API. */
            attributionText?: string;
            /** @description An HTML representation of the attribution notice for this result.  Please display either this notice or the contents of the attributionText field on all screens which contain data from the Marvel Comics API. */
            attributionHTML?: string;
            data?: components['schemas']['ComicDataContainer'];
            /** @description A digest value of the content returned by the call. */
            etag?: string;
        };
        StorySummary: {
            /** @description The path to the individual story resource. */
            resourceURI?: string;
            /** @description The canonical name of the story. */
            name?: string;
            /** @description The type of the story (interior or cover). */
            type?: string;
        };
        EventDataContainer: {
            offset?: components['schemas']['int'];
            limit?: components['schemas']['int'];
            total?: components['schemas']['int'];
            count?: components['schemas']['int'];
            results?: components['schemas']['Array'];
        };
        CharacterList: {
            available?: components['schemas']['int'];
            returned?: components['schemas']['int'];
            /** @description The path to the full list of characters in this collection. */
            collectionURI?: string;
            items?: components['schemas']['Array'];
        };
        ComicList: {
            available?: components['schemas']['int'];
            returned?: components['schemas']['int'];
            /** @description The path to the full list of issues in this collection. */
            collectionURI?: string;
            items?: components['schemas']['Array'];
        };
        ComicPrice: {
            /** @description A description of the price (e.g. print price, digital price). */
            type?: string;
            price?: number;
        };
        Series: {
            id?: components['schemas']['int'];
            /** @description The canonical title of the series. */
            title?: string;
            /** @description A description of the series. */
            description?: string;
            /** @description The canonical URL identifier for this resource. */
            resourceURI?: string;
            urls?: components['schemas']['Array'];
            startYear?: components['schemas']['int'];
            endYear?: components['schemas']['int'];
            /** @description The age-appropriateness rating for the series. */
            rating?: string;
            modified?: components['schemas']['Date'];
            thumbnail?: components['schemas']['Image'];
            comics?: components['schemas']['ComicList'];
            stories?: components['schemas']['StoryList'];
            events?: components['schemas']['EventList'];
            characters?: components['schemas']['CharacterList'];
            creators?: components['schemas']['CreatorList'];
            next?: components['schemas']['SeriesSummary'];
            previous?: components['schemas']['SeriesSummary'];
        };
        StoryDataContainer: {
            offset?: components['schemas']['int'];
            limit?: components['schemas']['int'];
            total?: components['schemas']['int'];
            count?: components['schemas']['int'];
            results?: components['schemas']['Array'];
        };
        StoryList: {
            available?: components['schemas']['int'];
            returned?: components['schemas']['int'];
            /** @description The path to the full list of stories in this collection. */
            collectionURI?: string;
            items?: components['schemas']['Array'];
        };
        TextObject: {
            /** @description The canonical type of the text object (e.g. solicit text, preview text, etc.). */
            type?: string;
            /** @description The IETF language tag denoting the language the text object is written in. */
            language?: string;
            /** @description The text. */
            text?: string;
        };
        EventList: {
            available?: components['schemas']['int'];
            returned?: components['schemas']['int'];
            /** @description The path to the full list of events in this collection. */
            collectionURI?: string;
            items?: components['schemas']['Array'];
        };
        SeriesDataWrapper: {
            code?: components['schemas']['int'];
            /** @description A string description of the call status. */
            status?: string;
            /** @description The copyright notice for the returned result. */
            copyright?: string;
            /** @description The attribution notice for this result.  Please display either this notice or the contents of the attributionHTML field on all screens which contain data from the Marvel Comics API. */
            attributionText?: string;
            /** @description An HTML representation of the attribution notice for this result.  Please display either this notice or the contents of the attributionText field on all screens which contain data from the Marvel Comics API. */
            attributionHTML?: string;
            data?: components['schemas']['SeriesDataContainer'];
            /** @description A digest value of the content returned by the call. */
            etag?: string;
        };
        EventSummary: {
            /** @description The path to the individual event resource. */
            resourceURI?: string;
            /** @description The name of the event. */
            name?: string;
        };
        ComicSummary: {
            /** @description The path to the individual comic resource. */
            resourceURI?: string;
            /** @description The canonical name of the comic. */
            name?: string;
        };
        Event: {
            id?: components['schemas']['int'];
            /** @description The title of the event. */
            title?: string;
            /** @description A description of the event. */
            description?: string;
            /** @description The canonical URL identifier for this resource. */
            resourceURI?: string;
            urls?: components['schemas']['Array'];
            modified?: components['schemas']['Date'];
            start?: components['schemas']['Date'];
            end?: components['schemas']['Date'];
            thumbnail?: components['schemas']['Image'];
            comics?: components['schemas']['ComicList'];
            stories?: components['schemas']['StoryList'];
            series?: components['schemas']['SeriesList'];
            characters?: components['schemas']['CharacterList'];
            creators?: components['schemas']['CreatorList'];
            next?: components['schemas']['EventSummary'];
            previous?: components['schemas']['EventSummary'];
        };
        CreatorDataWrapper: {
            code?: components['schemas']['int'];
            /** @description A string description of the call status. */
            status?: string;
            /** @description The copyright notice for the returned result. */
            copyright?: string;
            /** @description The attribution notice for this result.  Please display either this notice or the contents of the attributionHTML field on all screens which contain data from the Marvel Comics API. */
            attributionText?: string;
            /** @description An HTML representation of the attribution notice for this result.  Please display either this notice or the contents of the attributionText field on all screens which contain data from the Marvel Comics API. */
            attributionHTML?: string;
            data?: components['schemas']['CreatorDataContainer'];
            /** @description A digest value of the content returned by the call. */
            etag?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getCreatorSeriesCollection: {
        parameters: {
            query?: {
                /** @description Filter by series title. */
                title?: string;
                /** @description Return series with titles that begin with the specified string (e.g. Sp). */
                titleStartsWith?: string;
                /** @description Return only series matching the specified start year. */
                startYear?: number;
                /** @description Return only series which have been modified since the specified date. */
                modifiedSince?: string;
                /** @description Return only series which contain the specified comics (accepts a comma-separated list of ids). */
                comics?: number[];
                /** @description Return only series which contain the specified stories (accepts a comma-separated list of ids). */
                stories?: number[];
                /** @description Return only series which have comics that take place during the specified events (accepts a comma-separated list of ids). */
                events?: number[];
                /** @description Return only series which feature the specified characters (accepts a comma-separated list of ids). */
                characters?: number[];
                /** @description Filter the series by publication frequency type. */
                seriesType?: 'collection' | 'one shot' | 'limited' | 'ongoing';
                /** @description Return only series containing one or more comics with the specified format. */
                contains?:
                | 'comic'
                | 'magazine'
                | 'trade paperback'
                | 'hardcover'
                | 'digest'
                | 'graphic novel'
                | 'digital comic'
                | 'infinite comic';
                /** @description Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. */
                orderBy?:
                | 'title'
                | 'modified'
                | 'startYear'
                | '-title'
                | '-modified'
                | '-startYear';
                /** @description Limit the result set to the specified number of resources. */
                limit?: number;
                /** @description Skip the specified number of resources in the result set. */
                offset?: number;
            };
            header?: never;
            path: {
                /** @description The creator ID. */
                creatorId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Invalid value passed to filter. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEventStoryCollection: {
        parameters: {
            query?: {
                /** @description Return only stories which have been modified since the specified date. */
                modifiedSince?: string;
                /** @description Return only stories contained in the specified (accepts a comma-separated list of ids). */
                comics?: number[];
                /** @description Return only stories contained the specified series (accepts a comma-separated list of ids). */
                series?: number[];
                /** @description Return only stories which feature work by the specified creators (accepts a comma-separated list of ids). */
                creators?: number[];
                /** @description Return only stories which feature the specified characters (accepts a comma-separated list of ids). */
                characters?: number[];
                /** @description Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. */
                orderBy?: 'id' | 'modified' | '-id' | '-modified';
                /** @description Limit the result set to the specified number of resources. */
                limit?: number;
                /** @description Skip the specified number of resources in the result set. */
                offset?: number;
            };
            header?: never;
            path: {
                /** @description The ID of the event. */
                eventId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Invalid value passed to filter. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCreatorCollection: {
        parameters: {
            query?: {
                /** @description Filter by creator first name (e.g. Brian). */
                firstName?: string;
                /** @description Filter by creator middle name (e.g. Michael). */
                middleName?: string;
                /** @description Filter by creator last name (e.g. Bendis). */
                lastName?: string;
                /** @description Filter by suffix or honorific (e.g. Jr., Sr.). */
                suffix?: string;
                /** @description Filter by creator names that match critera (e.g. B, St L). */
                nameStartsWith?: string;
                /** @description Filter by creator first names that match critera (e.g. B, St L). */
                firstNameStartsWith?: string;
                /** @description Filter by creator middle names that match critera (e.g. Mi). */
                middleNameStartsWith?: string;
                /** @description Filter by creator last names that match critera (e.g. Ben). */
                lastNameStartsWith?: string;
                /** @description Return only creators which have been modified since the specified date. */
                modifiedSince?: string;
                /** @description Return only creators who worked on in the specified comics (accepts a comma-separated list of ids). */
                comics?: number[];
                /** @description Return only creators who worked on the specified series (accepts a comma-separated list of ids). */
                series?: number[];
                /** @description Return only creators who worked on comics that took place in the specified events (accepts a comma-separated list of ids). */
                events?: number[];
                /** @description Return only creators who worked on the specified stories (accepts a comma-separated list of ids). */
                stories?: number[];
                /** @description Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. */
                orderBy?:
                | 'lastName'
                | 'firstName'
                | 'middleName'
                | 'suffix'
                | 'modified'
                | '-lastName'
                | '-firstName'
                | '-middleName'
                | '-suffix'
                | '-modified';
                /** @description Limit the result set to the specified number of resources. */
                limit?: number;
                /** @description Skip the specified number of resources in the result set. */
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Invalid value passed to filter. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getComicsCollection: {
        parameters: {
            query?: {
                /** @description Filter by the issue format (e.g. comic, digital comic, hardcover). */
                format?:
                | 'comic'
                | 'magazine'
                | 'trade paperback'
                | 'hardcover'
                | 'digest'
                | 'graphic novel'
                | 'digital comic'
                | 'infinite comic';
                /** @description Filter by the issue format type (comic or collection). */
                formatType?: 'comic' | 'collection';
                /** @description Exclude variant comics from the result set. */
                noVariants?: true;
                /** @description Return comics within a predefined date range. */
                dateDescriptor?: 'lastWeek' | 'thisWeek' | 'nextWeek' | 'thisMonth';
                /** @description Return comics within a predefined date range.  Dates must be specified as date1,date2 (e.g. 2013-01-01,2013-01-02).  Dates are preferably formatted as YYYY-MM-DD but may be sent as any common date format. */
                dateRange?: number[];
                /** @description Return only issues in series whose title matches the input. */
                title?: string;
                /** @description Return only issues in series whose title starts with the input. */
                titleStartsWith?: string;
                /** @description Return only issues in series whose start year matches the input. */
                startYear?: number;
                /** @description Return only issues in series whose issue number matches the input. */
                issueNumber?: number;
                /** @description Filter by diamond code. */
                diamondCode?: string;
                /** @description Filter by digital comic id. */
                digitalId?: number;
                /** @description Filter by UPC. */
                upc?: string;
                /** @description Filter by ISBN. */
                isbn?: string;
                /** @description Filter by EAN. */
                ean?: string;
                /** @description Filter by ISSN. */
                issn?: string;
                /** @description Include only results which are available digitally. */
                hasDigitalIssue?: 'true';
                /** @description Return only comics which have been modified since the specified date. */
                modifiedSince?: string;
                /** @description Return only comics which feature the specified characters (accepts a comma-separated list of ids). */
                characters?: number[];
                /** @description Return only comics which are part of the specified series (accepts a comma-separated list of ids). */
                series?: number[];
                /** @description Return only comics which take place in the specified events (accepts a comma-separated list of ids). */
                events?: number[];
                /** @description Return only comics which contain the specified stories (accepts a comma-separated list of ids). */
                stories?: number[];
                /** @description Return only comics in which the specified characters appear together (for example in which BOTH Spider-Man and Wolverine appear). */
                sharedAppearances?: number[];
                /** @description Return only comics in which the specified creators worked together (for example in which BOTH Stan Lee and Jack Kirby did work). */
                collaborators?: number[];
                /** @description Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. */
                orderBy?:
                | 'focDate'
                | 'onsaleDate'
                | 'title'
                | 'issueNumber'
                | 'modified'
                | '-focDate'
                | '-onsaleDate'
                | '-title'
                | '-issueNumber'
                | '-modified';
                /** @description Limit the result set to the specified number of resources. */
                limit?: number;
                /** @description Skip the specified number of resources in the result set. */
                offset?: number;
            };
            header?: never;
            path: {
                /** @description The creator ID. */
                creatorId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Invalid value passed to filter. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCreatorCollectionByStory: {
        parameters: {
            query?: {
                /** @description Return only characters matching the specified full character name (e.g. Spider-Man). */
                name?: string;
                /** @description Return characters with names that begin with the specified string (e.g. Sp). */
                nameStartsWith?: string;
                /** @description Return only characters which have been modified since the specified date. */
                modifiedSince?: string;
                /** @description Return only characters which appear in the specified comics (accepts a comma-separated list of ids). */
                comics?: number[];
                /** @description Return only characters which appear the specified series (accepts a comma-separated list of ids). */
                series?: number[];
                /** @description Return only characters which appear comics that took place in the specified events (accepts a comma-separated list of ids). */
                events?: number[];
                /** @description Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. */
                orderBy?: 'name' | 'modified' | '-name' | '-modified';
                /** @description Limit the result set to the specified number of resources. */
                limit?: number;
                /** @description Skip the specified number of resources in the result set. */
                offset?: number;
            };
            header?: never;
            path: {
                /** @description The story ID. */
                storyId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Invalid value passed to filter. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            200: components['schemas']['CharacterDataWrapper'];
        };
    };
    getComicStoryCollection: {
        parameters: {
            query?: {
                /** @description Return only stories which have been modified since the specified date. */
                modifiedSince?: string;
                /** @description Return only stories contained the specified series (accepts a comma-separated list of ids). */
                series?: number[];
                /** @description Return only stories which take place during the specified events (accepts a comma-separated list of ids). */
                events?: number[];
                /** @description Return only stories which feature work by the specified creators (accepts a comma-separated list of ids). */
                creators?: number[];
                /** @description Return only stories which feature the specified characters (accepts a comma-separated list of ids). */
                characters?: number[];
                /** @description Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. */
                orderBy?: 'id' | 'modified' | '-id' | '-modified';
                /** @description Limit the result set to the specified number of resources. */
                limit?: number;
                /** @description Skip the specified number of resources. */
                offset?: number;
            };
            header?: never;
            path: {
                /** @description The comic ID. */
                comicId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Invalid value passed to filter. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getComicsCollectionByEvent: {
        parameters: {
            query?: {
                /** @description Filter by the issue format (e.g. comic, digital comic, hardcover). */
                format?:
                | 'comic'
                | 'magazine'
                | 'trade paperback'
                | 'hardcover'
                | 'digest'
                | 'graphic novel'
                | 'digital comic'
                | 'infinite comic';
                /** @description Filter by the issue format type (comic or collection). */
                formatType?: 'comic' | 'collection';
                /** @description Exclude variant comics from the result set. */
                noVariants?: 'true';
                /** @description Return comics within a predefined date range. */
                dateDescriptor?: 'lastWeek' | 'thisWeek' | 'nextWeek' | 'thisMonth';
                /** @description Return comics within a predefined date range.  Dates must be specified as date1,date2 (e.g. 2013-01-01,2013-01-02).  Dates are preferably formatted as YYYY-MM-DD but may be sent as any common date format. */
                dateRange?: number[];
                /** @description Return only issues in series whose title matches the input. */
                title?: string;
                /** @description Return only issues in series whose title starts with the input. */
                titleStartsWith?: string;
                /** @description Return only issues in series whose start year matches the input. */
                startYear?: number;
                /** @description Return only issues in series whose issue number matches the input. */
                issueNumber?: number;
                /** @description Filter by diamond code. */
                diamondCode?: string;
                /** @description Filter by digital comic id. */
                digitalId?: number;
                /** @description Filter by UPC. */
                upc?: string;
                /** @description Filter by ISBN. */
                isbn?: string;
                /** @description Filter by EAN. */
                ean?: string;
                /** @description Filter by ISSN. */
                issn?: string;
                /** @description Include only results which are available digitally. */
                hasDigitalIssue?: 'true';
                /** @description Return only comics which have been modified since the specified date. */
                modifiedSince?: string;
                /** @description Return only comics which feature work by the specified creators (accepts a comma-separated list of ids). */
                creators?: number[];
                /** @description Return only comics which feature the specified characters (accepts a comma-separated list of ids). */
                characters?: number[];
                /** @description Return only comics which are part of the specified series (accepts a comma-separated list of ids). */
                series?: number[];
                /** @description Return only comics which take place in the specified events (accepts a comma-separated list of ids). */
                events?: number[];
                /** @description Return only comics which contain the specified stories (accepts a comma-separated list of ids). */
                stories?: number[];
                /** @description Return only comics in which the specified characters appear together (for example in which BOTH Spider-Man and Wolverine appear). */
                sharedAppearances?: number[];
                /** @description Return only comics in which the specified creators worked together (for example in which BOTH Stan Lee and Jack Kirby did work). */
                collaborators?: number[];
                /** @description Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. */
                orderBy?:
                | 'focDate'
                | 'onsaleDate'
                | 'title'
                | 'issueNumber'
                | 'modified'
                | '-focDate'
                | '-onsaleDate'
                | '-title'
                | '-issueNumber'
                | '-modified';
                /** @description Limit the result set to the specified number of resources. */
                limit?: number;
                /** @description Skip the specified number of resources in the result set. */
                offset?: number;
            };
            header?: never;
            path: {
                /** @description The event id. */
                eventId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Invalid value passed to filter. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getSeriesIndividual: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Filter by series title. */
                seriesId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Series not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCharacterSeriesCollection: {
        parameters: {
            query?: {
                /** @description Filter by series title. */
                title?: string;
                /** @description Return series with titles that begin with the specified string (e.g. Sp). */
                titleStartsWith?: string;
                /** @description Return only series matching the specified start year. */
                startYear?: number;
                /** @description Return only series which have been modified since the specified date. */
                modifiedSince?: string;
                /** @description Return only series which contain the specified comics (accepts a comma-separated list of ids). */
                comics?: number[];
                /** @description Return only series which contain the specified stories (accepts a comma-separated list of ids). */
                stories?: number[];
                /** @description Return only series which have comics that take place during the specified events (accepts a comma-separated list of ids). */
                events?: number[];
                /** @description Return only series which feature work by the specified creators (accepts a comma-separated list of ids). */
                creators?: number[];
                /** @description Filter the series by publication frequency type. */
                seriesType?: 'collection' | 'one shot' | 'limited' | 'ongoing';
                /** @description Return only series containing one or more comics with the specified format. */
                contains?:
                | 'comic'
                | 'magazine'
                | 'trade paperback'
                | 'hardcover'
                | 'digest'
                | 'graphic novel'
                | 'digital comic'
                | 'infinite comic';
                /** @description Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. */
                orderBy?:
                | 'title'
                | 'modified'
                | 'startYear'
                | '-title'
                | '-modified'
                | '-startYear';
                /** @description Limit the result set to the specified number of resources. */
                limit?: number;
                /** @description Skip the specified number of resources in the result set. */
                offset?: number;
            };
            header?: never;
            path: {
                /** @description The character ID */
                characterId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Invalid value passed to filter. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEventSeriesCollection: {
        parameters: {
            query?: {
                /** @description Filter by series title. */
                title?: string;
                /** @description Return series with titles that begin with the specified string (e.g. Sp). */
                titleStartsWith?: string;
                /** @description Return only series matching the specified start year. */
                startYear?: number;
                /** @description Return only series which have been modified since the specified date. */
                modifiedSince?: string;
                /** @description Return only series which contain the specified comics (accepts a comma-separated list of ids). */
                comics?: number[];
                /** @description Return only series which contain the specified stories (accepts a comma-separated list of ids). */
                stories?: number[];
                /** @description Return only series which feature work by the specified creators (accepts a comma-separated list of ids). */
                creators?: number[];
                /** @description Return only series which feature the specified characters (accepts a comma-separated list of ids). */
                characters?: number[];
                /** @description Filter the series by publication frequency type. */
                seriesType?: 'collection' | 'one shot' | 'limited' | 'ongoing';
                /** @description Return only series containing one or more comics with the specified format. */
                contains?:
                | 'comic'
                | 'magazine'
                | 'trade paperback'
                | 'hardcover'
                | 'digest'
                | 'graphic novel'
                | 'digital comic'
                | 'infinite comic';
                /** @description Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. */
                orderBy?:
                | 'title'
                | 'modified'
                | 'startYear'
                | '-title'
                | '-modified'
                | '-startYear';
                /** @description Limit the result set to the specified number of resources. */
                limit?: number;
                /** @description Skip the specified number of resources in the result set. */
                offset?: number;
            };
            header?: never;
            path: {
                /** @description The event ID. */
                eventId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Invalid value passed to filter. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getComicsCollectionBySeries: {
        parameters: {
            query?: {
                /** @description Filter by the issue format (e.g. comic, digital comic, hardcover). */
                format?:
                | 'comic'
                | 'magazine'
                | 'trade paperback'
                | 'hardcover'
                | 'digest'
                | 'graphic novel'
                | 'digital comic'
                | 'infinite comic';
                /** @description Filter by the issue format type (comic or collection). */
                formatType?: 'comic' | 'collection';
                /** @description Exclude variant comics from the result set. */
                noVariants?: 'true';
                /** @description Return comics within a predefined date range. */
                dateDescriptor?: 'lastWeek' | 'thisWeek' | 'nextWeek' | 'thisMonth';
                /** @description Return comics within a predefined date range.  Dates must be specified as date1,date2 (e.g. 2013-01-01,2013-01-02).  Dates are preferably formatted as YYYY-MM-DD but may be sent as any common date format. */
                dateRange?: number[];
                /** @description Return only issues in series whose title matches the input. */
                title?: string;
                /** @description Return only issues in series whose title starts with the input. */
                titleStartsWith?: string;
                /** @description Return only issues in series whose start year matches the input. */
                startYear?: number;
                /** @description Return only issues in series whose issue number matches the input. */
                issueNumber?: number;
                /** @description Filter by diamond code. */
                diamondCode?: string;
                /** @description Filter by digital comic id. */
                digitalId?: number;
                /** @description Filter by UPC. */
                upc?: string;
                /** @description Filter by ISBN. */
                isbn?: string;
                /** @description Filter by EAN. */
                ean?: string;
                /** @description Filter by ISSN. */
                issn?: string;
                /** @description Include only results which are available digitally. */
                hasDigitalIssue?: 'true';
                /** @description Return only comics which have been modified since the specified date. */
                modifiedSince?: string;
                /** @description Return only comics which feature work by the specified creators (accepts a comma-separated list of ids). */
                creators?: number[];
                /** @description Return only comics which feature the specified characters (accepts a comma-separated list of ids). */
                characters?: number[];
                /** @description Return only comics which take place in the specified events (accepts a comma-separated list of ids). */
                events?: number[];
                /** @description Return only comics which contain the specified stories (accepts a comma-separated list of ids). */
                stories?: number[];
                /** @description Return only comics in which the specified characters appear together (for example in which BOTH Spider-Man and Wolverine appear). */
                sharedAppearances?: number[];
                /** @description Return only comics in which the specified creators worked together (for example in which BOTH Stan Lee and Jack Kirby did work). */
                collaborators?: number[];
                /** @description Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. */
                orderBy?:
                | 'focDate'
                | 'onsaleDate'
                | 'title'
                | 'issueNumber'
                | 'modified'
                | '-focDate'
                | '-onsaleDate'
                | '-title'
                | '-issueNumber'
                | '-modified';
                /** @description Limit the result set to the specified number of resources. */
                limit?: number;
                /** @description Skip the specified number of resources in the result set. */
                offset?: number;
            };
            header?: never;
            path: {
                /** @description The series ID. */
                seriesId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Invalid value passed to filter. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getComicsCharacterCollection: {
        parameters: {
            query?: {
                /** @description Filter by the issue format (e.g. comic, digital comic, hardcover). */
                format?:
                | 'comic'
                | 'magazine'
                | 'trade paperback'
                | 'hardcover'
                | 'digest'
                | 'graphic novel'
                | 'digital comic'
                | 'infinite comic';
                /** @description Filter by the issue format type (comic or collection). */
                formatType?: 'comic' | 'collection';
                /** @description Exclude variant comics from the result set. */
                noVariants?: true;
                /** @description Return comics within a predefined date range. */
                dateDescriptor?: 'lastWeek' | 'thisWeek' | 'nextWeek' | 'thisMonth';
                /** @description Return comics within a predefined date range.  Dates must be specified as date1,date2 (e.g. 2013-01-01,2013-01-02).  Dates are preferably formatted as YYYY-MM-DD but may be sent as any common date format. */
                dateRange?: number[];
                /** @description Return only issues in series whose title matches the input. */
                title?: string;
                /** @description Return only issues in series whose title starts with the input. */
                titleStartsWith?: string;
                /** @description Return only issues in series whose start year matches the input. */
                startYear?: number;
                /** @description Return only issues in series whose issue number matches the input. */
                issueNumber?: number;
                /** @description Filter by diamond code. */
                diamondCode?: string;
                /** @description Filter by digital comic id. */
                digitalId?: number;
                /** @description Filter by UPC. */
                upc?: string;
                /** @description Filter by ISBN. */
                isbn?: string;
                /** @description Filter by EAN. */
                ean?: string;
                /** @description Filter by ISSN. */
                issn?: string;
                /** @description Include only results which are available digitally. */
                hasDigitalIssue?: true;
                /** @description Return only comics which have been modified since the specified date. */
                modifiedSince?: string;
                /** @description Return only comics which feature work by the specified creators (accepts a comma-separated list of ids). */
                creators?: number[];
                /** @description Return only comics which are part of the specified series (accepts a comma-separated list of ids). */
                series?: number[];
                /** @description Return only comics which take place in the specified events (accepts a comma-separated list of ids). */
                events?: number[];
                /** @description Return only comics which contain the specified stories (accepts a comma-separated list of ids). */
                stories?: number[];
                /** @description Return only comics in which the specified characters appear together (for example in which BOTH Spider-Man and Wolverine appear). */
                sharedAppearances?: number[];
                /** @description Return only comics in which the specified creators worked together (for example in which BOTH Stan Lee and Jack Kirby did work). */
                collaborators?: number[];
                /** @description Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. */
                orderBy?:
                | 'focDate'
                | 'onsaleDate'
                | 'title'
                | 'issueNumber'
                | 'modified'
                | '-focDate'
                | '-onsaleDate'
                | '-title'
                | '-issueNumber'
                | '-modified';
                /** @description Limit the result set to the specified number of resources. */
                limit?: number;
                /** @description Skip the specified number of resources in the result set. */
                offset?: number;
            };
            header?: never;
            path: {
                /** @description The character id. */
                characterId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Invalid value passed to filter. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEventsCollection: {
        parameters: {
            query?: {
                /** @description Filter the event list by name. */
                name?: string;
                /** @description Return events with names that begin with the specified string (e.g. Sp). */
                nameStartsWith?: string;
                /** @description Return only events which have been modified since the specified date. */
                modifiedSince?: string;
                /** @description Return only events which feature work by the specified creators (accepts a comma-separated list of ids). */
                creators?: number[];
                /** @description Return only events which feature the specified characters (accepts a comma-separated list of ids). */
                characters?: number[];
                /** @description Return only events which are part of the specified series (accepts a comma-separated list of ids). */
                series?: number[];
                /** @description Return only events which take place in the specified comics (accepts a comma-separated list of ids). */
                comics?: number[];
                /** @description Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. */
                orderBy?:
                | 'name'
                | 'startDate'
                | 'modified'
                | '-name'
                | '-startDate'
                | '-modified';
                /** @description Limit the result set to the specified number of resources. */
                limit?: number;
                /** @description Skip the specified number of resources in the result set. */
                offset?: number;
            };
            header?: never;
            path: {
                /** @description The story ID. */
                storyId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Invalid value passed to filter. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getComicCharacterCollection: {
        parameters: {
            query?: {
                /** @description Return only characters matching the specified full character name (e.g. Spider-Man). */
                name?: string;
                /** @description Return characters with names that begin with the specified string (e.g. Sp). */
                nameStartsWith?: string;
                /** @description Return only characters which have been modified since the specified date. */
                modifiedSince?: string;
                /** @description Return only characters which appear the specified series (accepts a comma-separated list of ids). */
                series?: number[];
                /** @description Return only characters which appear comics that took place in the specified events (accepts a comma-separated list of ids). */
                events?: number[];
                /** @description Return only characters which appear the specified stories (accepts a comma-separated list of ids). */
                stories?: number[];
                /** @description Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. */
                orderBy?: 'name' | 'modified' | '-name' | '-modified';
                /** @description Limit the result set to the specified number of resources. */
                limit?: number;
                /** @description Skip the specified number of resources in the result set. */
                offset?: number;
            };
            header?: never;
            path: {
                /** @description The comic id. */
                comicId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Invalid value passed to filter. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCreatorStoryCollection: {
        parameters: {
            query?: {
                /** @description Return only stories which have been modified since the specified date. */
                modifiedSince?: string;
                /** @description Return only stories contained in the specified comics (accepts a comma-separated list of ids). */
                comics?: number[];
                /** @description Return only stories contained the specified series (accepts a comma-separated list of ids). */
                series?: number[];
                /** @description Return only stories which take place during the specified events (accepts a comma-separated list of ids). */
                events?: number[];
                /** @description Return only stories which feature the specified characters (accepts a comma-separated list of ids). */
                characters?: number[];
                /** @description Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. */
                orderBy?: 'id' | 'modified' | '-id' | '-modified';
                /** @description Limit the result set to the specified number of resources. */
                limit?: number;
                /** @description Skip the specified number of resources in the result set. */
                offset?: number;
            };
            header?: never;
            path: {
                /** @description The ID of the creator. */
                creatorId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Invalid value passed to filter. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getComicIndividual: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A single comic. */
                comicId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Comic not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getStoryIndividual: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Filter by story id. */
                storyId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Story not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCharacterEventsCollection: {
        parameters: {
            query?: {
                /** @description Filter the event list by name. */
                name?: string;
                /** @description Return events with names that begin with the specified string (e.g. Sp). */
                nameStartsWith?: string;
                /** @description Return only events which have been modified since the specified date. */
                modifiedSince?: string;
                /** @description Return only events which feature work by the specified creators (accepts a comma-separated list of ids). */
                creators?: number[];
                /** @description Return only events which are part of the specified series (accepts a comma-separated list of ids). */
                series?: number[];
                /** @description Return only events which take place in the specified comics (accepts a comma-separated list of ids). */
                comics?: number[];
                /** @description Return only events which contain the specified stories (accepts a comma-separated list of ids). */
                stories?: number[];
                /** @description Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. */
                orderBy?:
                | 'name'
                | 'startDate'
                | 'modified'
                | '-name'
                | '-startDate'
                | '-modified';
                /** @description Limit the result set to the specified number of resources. */
                limit?: number;
                /** @description Skip the specified number of resources in the result set. */
                offset?: number;
            };
            header?: never;
            path: {
                /** @description The character ID. */
                characterId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Invalid value passed to filter. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCreatorEventsCollection: {
        parameters: {
            query?: {
                /** @description Filter the event list by name. */
                name?: string;
                /** @description Return events with names that begin with the specified string (e.g. Sp). */
                nameStartsWith?: string;
                /** @description Return only events which have been modified since the specified date. */
                modifiedSince?: string;
                /** @description Return only events which feature the specified characters (accepts a comma-separated list of ids). */
                characters?: number[];
                /** @description Return only events which are part of the specified series (accepts a comma-separated list of ids). */
                series?: number[];
                /** @description Return only events which take place in the specified comics (accepts a comma-separated list of ids). */
                comics?: number[];
                /** @description Return only events which contain the specified stories (accepts a comma-separated list of ids). */
                stories?: number[];
                /** @description Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. */
                orderBy?:
                | 'name'
                | 'startDate'
                | 'modified'
                | '-name'
                | '-startDate'
                | '-modified';
                /** @description Limit the result set to the specified number of resources. */
                limit?: number;
                /** @description Skip the specified number of resources in the result set. */
                offset?: number;
            };
            header?: never;
            path: {
                /** @description The creator ID. */
                creatorId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Invalid value passed to filter. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCreatorCollectionBySeries: {
        parameters: {
            query?: {
                /** @description Filter by creator first name (e.g. brian). */
                firstName?: string;
                /** @description Filter by creator middle name (e.g. Michael). */
                middleName?: string;
                /** @description Filter by creator last name (e.g. Bendis). */
                lastName?: string;
                /** @description Filter by suffix or honorific (e.g. Jr., Sr.). */
                suffix?: string;
                /** @description Filter by creator names that match critera (e.g. B, St L). */
                nameStartsWith?: string;
                /** @description Filter by creator first names that match critera (e.g. B, St L). */
                firstNameStartsWith?: string;
                /** @description Filter by creator middle names that match critera (e.g. Mi). */
                middleNameStartsWith?: string;
                /** @description Filter by creator last names that match critera (e.g. Ben). */
                lastNameStartsWith?: string;
                /** @description Return only creators which have been modified since the specified date. */
                modifiedSince?: string;
                /** @description Return only creators who worked on in the specified comics (accepts a comma-separated list of ids). */
                comics?: number[];
                /** @description Return only creators who worked on comics that took place in the specified events (accepts a comma-separated list of ids). */
                events?: number[];
                /** @description Return only creators who worked on the specified stories (accepts a comma-separated list of ids). */
                stories?: number[];
                /** @description Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. */
                orderBy?:
                | 'lastName'
                | 'firstName'
                | 'middleName'
                | 'suffix'
                | 'modified'
                | '-lastName'
                | '-firstName'
                | '-middleName'
                | '-suffix'
                | '-modified';
                /** @description Limit the result set to the specified number of resources. */
                limit?: number;
                /** @description Skip the specified number of resources in the result set. */
                offset?: number;
            };
            header?: never;
            path: {
                /** @description The series ID. */
                seriesId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Invalid value passed to filter. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCreatorCollectionByComic: {
        parameters: {
            query?: {
                /** @description Filter by creator first name (e.g. brian). */
                firstName?: string;
                /** @description Filter by creator middle name (e.g. Michael). */
                middleName?: string;
                /** @description Filter by creator last name (e.g. Bendis). */
                lastName?: string;
                /** @description Filter by suffix or honorific (e.g. Jr., Sr.). */
                suffix?: string;
                /** @description Filter by creator names that match critera (e.g. B, St L). */
                nameStartsWith?: string;
                /** @description Filter by creator first names that match critera (e.g. B, St L). */
                firstNameStartsWith?: string;
                /** @description Filter by creator middle names that match critera (e.g. Mi). */
                middleNameStartsWith?: string;
                /** @description Filter by creator last names that match critera (e.g. Ben). */
                lastNameStartsWith?: string;
                /** @description Return only creators which have been modified since the specified date. */
                modifiedSince?: string;
                /** @description Return only creators who worked on in the specified comics (accepts a comma-separated list of ids). */
                comics?: number[];
                /** @description Return only creators who worked on the specified series (accepts a comma-separated list of ids). */
                series?: number[];
                /** @description Return only creators who worked on the specified stories (accepts a comma-separated list of ids). */
                stories?: number[];
                /** @description Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. */
                orderBy?:
                | 'lastName'
                | 'firstName'
                | 'middleName'
                | 'suffix'
                | 'modified'
                | '-lastName'
                | '-firstName'
                | '-middleName'
                | '-suffix'
                | '-modified';
                /** @description Limit the result set to the specified number of resources. */
                limit?: number;
                /** @description Skip the specified number of resources in the result set. */
                offset?: number;
            };
            header?: never;
            path: {
                /** @description The comic id. */
                comicId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Invalid value passed to filter. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCharacterIndividual: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A single character id. */
                characterId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Character not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getComics: {
        parameters: {
            query?: {
                /** @description Filter by the issue format (e.g. comic, digital comic, hardcover). */
                format?:
                | 'comic'
                | 'magazine'
                | 'trade paperback'
                | 'hardcover'
                | 'digest'
                | 'graphic novel'
                | 'digital comic'
                | 'infinite comic';
                /** @description Filter by the issue format type (comic or collection). */
                formatType?: 'comic' | 'collection';
                /** @description Exclude variants (alternate covers, secondary printings, director's cuts, etc.) from the result set. */
                noVariants?: true;
                /** @description Return comics within a predefined date range. */
                dateDescriptor?: 'lastWeek' | 'thisWeek' | 'nextWeek' | 'thisMonth';
                /** @description Return comics within a predefined date range.  Dates must be specified as date1,date2 (e.g. 2013-01-01,2013-01-02).  Dates are preferably formatted as YYYY-MM-DD but may be sent as any common date format. */
                dateRange?: number[];
                /** @description Return only issues in series whose title matches the input. */
                title?: string;
                /** @description Return only issues in series whose title starts with the input. */
                titleStartsWith?: string;
                /** @description Return only issues in series whose start year matches the input. */
                startYear?: number;
                /** @description Return only issues in series whose issue number matches the input. */
                issueNumber?: number;
                /** @description Filter by diamond code. */
                diamondCode?: string;
                /** @description Filter by digital comic id. */
                digitalId?: number;
                /** @description Filter by UPC. */
                upc?: string;
                /** @description Filter by ISBN. */
                isbn?: string;
                /** @description Filter by EAN. */
                ean?: string;
                /** @description Filter by ISSN. */
                issn?: string;
                /** @description Include only results which are available digitally. */
                hasDigitalIssue?: true;
                /** @description Return only comics which have been modified since the specified date. */
                modifiedSince?: string;
                /** @description Return only comics which feature work by the specified creators (accepts a comma-separated list of ids). */
                creators?: number[];
                /** @description Return only comics which feature the specified characters (accepts a comma-separated list of ids). */
                characters?: number[];
                /** @description Return only comics which are part of the specified series (accepts a comma-separated list of ids). */
                series?: number[];
                /** @description Return only comics which take place in the specified events (accepts a comma-separated list of ids). */
                events?: number[];
                /** @description Return only comics which contain the specified stories (accepts a comma-separated list of ids). */
                stories?: number[];
                /** @description Return only comics in which the specified characters appear together (for example in which BOTH Spider-Man and Wolverine appear). Accepts a comma-separated list of ids. */
                sharedAppearances?: number[];
                /** @description Return only comics in which the specified creators worked together (for example in which BOTH Stan Lee and Jack Kirby did work). Accepts a comma-separated list of ids. */
                collaborators?: number[];
                /** @description Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. */
                orderBy?:
                | 'focDate'
                | 'onsaleDate'
                | 'title'
                | 'issueNumber'
                | 'modified'
                | '-focDate'
                | '-onsaleDate'
                | '-title'
                | '-issueNumber'
                | '-modified';
                /** @description Limit the result set to the specified number of resources. */
                limit?: number;
                /** @description Skip the specified number of resources in the result set. */
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Invalid value passed to filter. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getSeriesCollection: {
        parameters: {
            query?: {
                /** @description Return only series matching the specified title. */
                title?: string;
                /** @description Return series with titles that begin with the specified string (e.g. Sp). */
                titleStartsWith?: string;
                /** @description Return only series matching the specified start year. */
                startYear?: number;
                /** @description Return only series which have been modified since the specified date. */
                modifiedSince?: string;
                /** @description Return only series which contain the specified comics (accepts a comma-separated list of ids). */
                comics?: number[];
                /** @description Return only series which contain the specified stories (accepts a comma-separated list of ids). */
                stories?: number[];
                /** @description Return only series which have comics that take place during the specified events (accepts a comma-separated list of ids). */
                events?: number[];
                /** @description Return only series which feature work by the specified creators (accepts a comma-separated list of ids). */
                creators?: number[];
                /** @description Return only series which feature the specified characters (accepts a comma-separated list of ids). */
                characters?: number[];
                /** @description Filter the series by publication frequency type. */
                seriesType?: 'collection' | 'one shot' | 'limited' | 'ongoing';
                /** @description Return only series containing one or more comics with the specified format. */
                contains?:
                | 'comic'
                | 'magazine'
                | 'trade paperback'
                | 'hardcover'
                | 'digest'
                | 'graphic novel'
                | 'digital comic'
                | 'infinite comic';
                /** @description Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. */
                orderBy?:
                | 'title'
                | 'modified'
                | 'startYear'
                | '-title'
                | '-modified'
                | '-startYear';
                /** @description Limit the result set to the specified number of resources. */
                limit?: number;
                /** @description Skip the specified number of resources in the result set. */
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Invalid value passed to filter. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getSeriesStoryCollection: {
        parameters: {
            query?: {
                /** @description Return only stories which have been modified since the specified date. */
                modifiedSince?: string;
                /** @description Return only stories contained in the specified (accepts a comma-separated list of ids). */
                comics?: number[];
                /** @description Return only stories which take place during the specified events (accepts a comma-separated list of ids). */
                events?: number[];
                /** @description Return only stories which feature work by the specified creators (accepts a comma-separated list of ids). */
                creators?: number[];
                /** @description Return only stories which feature the specified characters (accepts a comma-separated list of ids). */
                characters?: number[];
                /** @description Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. */
                orderBy?: 'id' | 'modified' | '-id' | '-modified';
                /** @description Limit the result set to the specified number of resources. */
                limit?: number;
                /** @description Skip the specified number of resources in the result set. */
                offset?: number;
            };
            header?: never;
            path: {
                /** @description The series ID. */
                seriesId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Invalid value passed to filter. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEventCharacterCollection: {
        parameters: {
            query?: {
                /** @description Return only characters matching the specified full character name (e.g. Spider-Man). */
                name?: string;
                /** @description Return characters with names that begin with the specified string (e.g. Sp). */
                nameStartsWith?: string;
                /** @description Return only characters which have been modified since the specified date. */
                modifiedSince?: string;
                /** @description Return only characters which appear in the specified comics (accepts a comma-separated list of ids). */
                comics?: number[];
                /** @description Return only characters which appear the specified series (accepts a comma-separated list of ids). */
                series?: number[];
                /** @description Return only characters which appear the specified stories (accepts a comma-separated list of ids). */
                stories?: number[];
                /** @description Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. */
                orderBy?: 'name' | 'modified' | '-name' | '-modified';
                /** @description Limit the result set to the specified number of resources. */
                limit?: number;
                /** @description Skip the specified number of resources in the result set. */
                offset?: number;
            };
            header?: never;
            path: {
                /** @description The event ID */
                eventId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Invalid value passed to filter. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCharacters: {
        parameters: {
            query?: {
                /** @description Return only characters matching the specified full character name (e.g. Spider-Man). */
                name?: string;
                /** @description Return characters with names that begin with the specified string (e.g. Sp). */
                nameStartsWith?: string;
                /** @description Return only characters which have been modified since the specified date. */
                modifiedSince?: string;
                /** @description Return only characters which appear in the specified comics (accepts a comma-separated list of ids). */
                comics?: number[];
                /** @description Return only characters which appear the specified series (accepts a comma-separated list of ids). */
                series?: number[];
                /** @description Return only characters which appear in the specified events (accepts a comma-separated list of ids). */
                events?: number[];
                /** @description Return only characters which appear the specified stories (accepts a comma-separated list of ids). */
                stories?: number[];
                /** @description Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. */
                orderBy?: 'name' | 'modified' | '-name' | '-modified';
                /** @description Limit the result set to the specified number of resources. */
                limit?: number;
                /** @description Skip the specified number of resources in the result set. */
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Invalid value passed to filter. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            200: components['schemas']['CharacterDataWrapper'];
        };
    };
    getCreatorIndividual: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A single creator id. */
                creatorId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Creator not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEventIndividual: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A single event. */
                eventId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Event not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCreatorCollectionByStoryId: {
        parameters: {
            query?: {
                /** @description Filter by creator first name (e.g. brian). */
                firstName?: string;
                /** @description Filter by creator middle name (e.g. Michael). */
                middleName?: string;
                /** @description Filter by creator last name (e.g. Bendis). */
                lastName?: string;
                /** @description Filter by suffix or honorific (e.g. Jr., Sr.). */
                suffix?: string;
                /** @description Filter by creator names that match critera (e.g. B, St L). */
                nameStartsWith?: string;
                /** @description Filter by creator first names that match critera (e.g. B, St L). */
                firstNameStartsWith?: string;
                /** @description Filter by creator middle names that match critera (e.g. Mi). */
                middleNameStartsWith?: string;
                /** @description Filter by creator last names that match critera (e.g. Ben). */
                lastNameStartsWith?: string;
                /** @description Return only creators which have been modified since the specified date. */
                modifiedSince?: string;
                /** @description Return only creators who worked on in the specified comics (accepts a comma-separated list of ids). */
                comics?: number[];
                /** @description Return only creators who worked on the specified series (accepts a comma-separated list of ids). */
                series?: number[];
                /** @description Return only creators who worked on comics that took place in the specified events (accepts a comma-separated list of ids). */
                events?: number[];
                /** @description Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. */
                orderBy?:
                | 'lastName'
                | 'firstName'
                | 'middleName'
                | 'suffix'
                | 'modified'
                | '-lastName'
                | '-firstName'
                | '-middleName'
                | '-suffix'
                | '-modified';
                /** @description Limit the result set to the specified number of resources. */
                limit?: number;
                /** @description Skip the specified number of resources in the result set. */
                offset?: number;
            };
            header?: never;
            path: {
                /** @description The story ID. */
                storyId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Invalid value passed to filter. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCharacterStoryCollection: {
        parameters: {
            query?: {
                /** @description Return only stories which have been modified since the specified date. */
                modifiedSince?: string;
                /** @description Return only stories contained in the specified (accepts a comma-separated list of ids). */
                comics?: number[];
                /** @description Return only stories contained the specified series (accepts a comma-separated list of ids). */
                series?: number[];
                /** @description Return only stories which take place during the specified events (accepts a comma-separated list of ids). */
                events?: number[];
                /** @description Return only stories which feature work by the specified creators (accepts a comma-separated list of ids). */
                creators?: number[];
                /** @description Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. */
                orderBy?: 'id' | 'modified' | '-id' | '-modified';
                /** @description Limit the result set to the specified number of resources. */
                limit?: number;
                /** @description Skip the specified number of resources in the result set. */
                offset?: number;
            };
            header?: never;
            path: {
                /** @description The character ID. */
                characterId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Invalid value passed to filter. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getComicsCollectionByStoryId: {
        parameters: {
            query?: {
                /** @description Filter by the issue format (e.g. comic, digital comic, hardcover). */
                format?:
                | 'comic'
                | 'magazine'
                | 'trade paperback'
                | 'hardcover'
                | 'digest'
                | 'graphic novel'
                | 'digital comic'
                | 'infinite comic';
                /** @description Filter by the issue format type (comic or collection). */
                formatType?: 'comic' | 'collection';
                /** @description Exclude variant comics from the result set. */
                noVariants?: 'true';
                /** @description Return comics within a predefined date range. */
                dateDescriptor?: 'lastWeek' | 'thisWeek' | 'nextWeek' | 'thisMonth';
                /** @description Return comics within a predefined date range.  Dates must be specified as date1,date2 (e.g. 2013-01-01,2013-01-02).  Dates are preferably formatted as YYYY-MM-DD but may be sent as any common date format. */
                dateRange?: number[];
                /** @description Return only issues in series whose title matches the input. */
                title?: string;
                /** @description Return only issues in series whose title starts with the input. */
                titleStartsWith?: string;
                /** @description Return only issues in series whose start year matches the input. */
                startYear?: number;
                /** @description Return only issues in series whose issue number matches the input. */
                issueNumber?: number;
                /** @description Filter by diamond code. */
                diamondCode?: string;
                /** @description Filter by digital comic id. */
                digitalId?: number;
                /** @description Filter by UPC. */
                upc?: string;
                /** @description Filter by ISBN. */
                isbn?: string;
                /** @description Filter by EAN. */
                ean?: string;
                /** @description Filter by ISSN. */
                issn?: string;
                /** @description Include only results which are available digitally. */
                hasDigitalIssue?: 'true';
                /** @description Return only comics which have been modified since the specified date. */
                modifiedSince?: string;
                /** @description Return only comics which feature work by the specified creators (accepts a comma-separated list of ids). */
                creators?: number[];
                /** @description Return only comics which feature the specified characters (accepts a comma-separated list of ids). */
                characters?: number[];
                /** @description Return only comics which are part of the specified series (accepts a comma-separated list of ids). */
                series?: number[];
                /** @description Return only comics which take place in the specified events (accepts a comma-separated list of ids). */
                events?: number[];
                /** @description Return only comics in which the specified characters appear together (for example in which BOTH Spider-Man and Wolverine appear). */
                sharedAppearances?: number[];
                /** @description Return only comics in which the specified creators worked together (for example in which BOTH Stan Lee and Jack Kirby did work). */
                collaborators?: number[];
                /** @description Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. */
                orderBy?:
                | 'focDate'
                | 'onsaleDate'
                | 'title'
                | 'issueNumber'
                | 'modified'
                | '-focDate'
                | '-onsaleDate'
                | '-title'
                | '-issueNumber'
                | '-modified';
                /** @description Limit the result set to the specified number of resources. */
                limit?: number;
                /** @description Skip the specified number of resources in the result set. */
                offset?: number;
            };
            header?: never;
            path: {
                /** @description The story ID. */
                storyId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Invalid value passed to filter. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getStorySeriesCollection: {
        parameters: {
            query?: {
                /** @description Return only series which have comics that take place during the specified events (accepts a comma-separated list of ids). */
                events?: number[];
                /** @description Filter by series title. */
                title?: string;
                /** @description Return series with titles that begin with the specified string (e.g. Sp). */
                titleStartsWith?: string;
                /** @description Return only series matching the specified start year. */
                startYear?: number;
                /** @description Return only series which have been modified since the specified date. */
                modifiedSince?: string;
                /** @description Return only series which contain the specified comics (accepts a comma-separated list of ids). */
                comics?: number[];
                /** @description Return only series which feature work by the specified creators (accepts a comma-separated list of ids). */
                creators?: number[];
                /** @description Return only series which feature the specified characters (accepts a comma-separated list of ids). */
                characters?: number[];
                /** @description Filter the series by publication frequency type. */
                seriesType?: 'collection' | 'one shot' | 'limited' | 'ongoing';
                /** @description Return only series containing one or more comics with the specified format. */
                contains?:
                | 'comic'
                | 'magazine'
                | 'trade paperback'
                | 'hardcover'
                | 'digest'
                | 'graphic novel'
                | 'digital comic'
                | 'infinite comic';
                /** @description Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. */
                orderBy?:
                | 'title'
                | 'modified'
                | 'startYear'
                | '-title'
                | '-modified'
                | '-startYear';
                /** @description Limit the result set to the specified number of resources. */
                limit?: number;
                /** @description Skip the specified number of resources in the result set. */
                offset?: number;
            };
            header?: never;
            path: {
                /** @description The story ID. */
                storyId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Invalid value passed to filter. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEventsCollectionBySeriesId: {
        parameters: {
            query?: {
                /** @description Filter the event list by name. */
                name?: string;
                /** @description Return events with names that begin with the specified string (e.g. Sp). */
                nameStartsWith?: string;
                /** @description Return only events which have been modified since the specified date. */
                modifiedSince?: string;
                /** @description Return only events which feature work by the specified creators (accepts a comma-separated list of ids). */
                creators?: number[];
                /** @description Return only events which feature the specified characters (accepts a comma-separated list of ids). */
                characters?: number[];
                /** @description Return only events which take place in the specified comics (accepts a comma-separated list of ids). */
                comics?: number[];
                /** @description Return only events which contain the specified stories (accepts a comma-separated list of ids). */
                stories?: number[];
                /** @description Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. */
                orderBy?:
                | 'name'
                | 'startDate'
                | 'modified'
                | '-name'
                | '-startDate'
                | '-modified';
                /** @description Limit the result set to the specified number of resources. */
                limit?: number;
                /** @description Skip the specified number of resources in the result set. */
                offset?: number;
            };
            header?: never;
            path: {
                /** @description The series ID. */
                seriesId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Invalid value passed to filter. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getIssueEventsCollection: {
        parameters: {
            query?: {
                /** @description Filter the event list by name. */
                name?: string;
                /** @description Return events with names that begin with the specified string (e.g. Sp). */
                nameStartsWith?: string;
                /** @description Return only events which have been modified since the specified date. */
                modifiedSince?: string;
                /** @description Return only events which feature work by the specified creators (accepts a comma-separated list of ids). */
                creators?: number[];
                /** @description Return only events which feature the specified characters (accepts a comma-separated list of ids). */
                characters?: number[];
                /** @description Return only events which are part of the specified series (accepts a comma-separated list of ids). */
                series?: number[];
                /** @description Return only events which contain the specified stories (accepts a comma-separated list of ids). */
                stories?: number[];
                /** @description Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. */
                orderBy?:
                | 'name'
                | 'startDate'
                | 'modified'
                | '-name'
                | '-startDate'
                | '-modified';
                /** @description Limit the result set to the specified number of resources. */
                limit?: number;
                /** @description Skip the specified number of resources in the result set. */
                offset?: number;
            };
            header?: never;
            path: {
                /** @description The comic ID. */
                comicId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Invalid value passed to filter. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEvents: {
        parameters: {
            query?: {
                /** @description Return only events which match the specified name. */
                name?: string;
                /** @description Return events with names that begin with the specified string (e.g. Sp). */
                nameStartsWith?: string;
                /** @description Return only events which have been modified since the specified date. */
                modifiedSince?: string;
                /** @description Return only events which feature work by the specified creators (accepts a comma-separated list of ids). */
                creators?: number[];
                /** @description Return only events which feature the specified characters (accepts a comma-separated list of ids). */
                characters?: number[];
                /** @description Return only events which are part of the specified series (accepts a comma-separated list of ids). */
                series?: number[];
                /** @description Return only events which take place in the specified comics (accepts a comma-separated list of ids). */
                comics?: number[];
                /** @description Return only events which take place in the specified stories (accepts a comma-separated list of ids). */
                stories?: number[];
                /** @description Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. */
                orderBy?:
                | 'name'
                | 'startDate'
                | 'modified'
                | '-name'
                | '-startDate'
                | '-modified';
                /** @description Limit the result set to the specified number of resources. */
                limit?: number;
                /** @description Skip the specified number of resources in the result set. */
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Invalid value passed to filter. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getSeriesCharacterWrapper: {
        parameters: {
            query?: {
                /** @description Return only characters matching the specified full character name (e.g. Spider-Man). */
                name?: string;
                /** @description Return characters with names that begin with the specified string (e.g. Sp). */
                nameStartsWith?: string;
                /** @description Return only characters which have been modified since the specified date. */
                modifiedSince?: string;
                /** @description Return only characters which appear in the specified comics (accepts a comma-separated list of ids). */
                comics?: number[];
                /** @description Return only characters which appear comics that took place in the specified events (accepts a comma-separated list of ids). */
                events?: number[];
                /** @description Return only characters which appear the specified stories (accepts a comma-separated list of ids). */
                stories?: number[];
                /** @description Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. */
                orderBy?: 'name' | 'modified' | '-name' | '-modified';
                /** @description Limit the result set to the specified number of resources. */
                limit?: number;
                /** @description Skip the specified number of resources in the result set. */
                offset?: number;
            };
            header?: never;
            path: {
                /** @description The series id. */
                seriesId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Invalid value passed to filter. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCreatorCollectionByEventId: {
        parameters: {
            query?: {
                /** @description Filter by creator first name (e.g. brian). */
                firstName?: string;
                /** @description Filter by creator middle name (e.g. Michael). */
                middleName?: string;
                /** @description Filter by creator last name (e.g. Bendis). */
                lastName?: string;
                /** @description Filter by suffix or honorific (e.g. Jr., Sr.). */
                suffix?: string;
                /** @description Filter by creator names that match critera (e.g. B, St L). */
                nameStartsWith?: string;
                /** @description Filter by creator first names that match critera (e.g. B, St L). */
                firstNameStartsWith?: string;
                /** @description Filter by creator middle names that match critera (e.g. Mi). */
                middleNameStartsWith?: string;
                /** @description Filter by creator last names that match critera (e.g. Ben). */
                lastNameStartsWith?: string;
                /** @description Return only creators which have been modified since the specified date. */
                modifiedSince?: string;
                /** @description Return only creators who worked on in the specified comics (accepts a comma-separated list of ids). */
                comics?: number[];
                /** @description Return only creators who worked on the specified series (accepts a comma-separated list of ids). */
                series?: number[];
                /** @description Return only creators who worked on the specified stories (accepts a comma-separated list of ids). */
                stories?: number[];
                /** @description Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. */
                orderBy?:
                | 'lastName'
                | 'firstName'
                | 'middleName'
                | 'suffix'
                | 'modified'
                | '-lastName'
                | '-firstName'
                | '-middleName'
                | '-suffix'
                | '-modified';
                /** @description Limit the result set to the specified number of resources. */
                limit?: number;
                /** @description Skip the specified number of resources in the result set. */
                offset?: number;
            };
            header?: never;
            path: {
                /** @description The event ID. */
                eventId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Invalid value passed to filter. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getStoryCollection: {
        parameters: {
            query?: {
                /** @description Return only stories which have been modified since the specified date. */
                modifiedSince?: string;
                /** @description Return only stories contained in the specified (accepts a comma-separated list of ids). */
                comics?: number[];
                /** @description Return only stories contained the specified series (accepts a comma-separated list of ids). */
                series?: number[];
                /** @description Return only stories which take place during the specified events (accepts a comma-separated list of ids). */
                events?: number[];
                /** @description Return only stories which feature work by the specified creators (accepts a comma-separated list of ids). */
                creators?: number[];
                /** @description Return only stories which feature the specified characters (accepts a comma-separated list of ids). */
                characters?: number[];
                /** @description Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. */
                orderBy?: 'id' | 'modified' | '-id' | '-modified';
                /** @description Limit the result set to the specified number of resources. */
                limit?: number;
                /** @description Skip the specified number of resources in the result set. */
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Invalid value passed to filter. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
